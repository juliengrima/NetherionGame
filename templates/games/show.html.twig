{% extends 'layout.html.twig' %}

{% block title %}{{ game.name }}{% endblock %}

{% block body %}
    {% if game.images is not empty %}
        {% for image in game.images %}
            {% set extension = image.link|split('.')|last %}
            {% if image.title %}
            <div id="parallax-container" class="parallax-container">
                <div class="parallax-content">
                    <div class="parallax-section" style="background-image: url('{{ asset(image.link) }}');">
                        <h2>{{ game.name }}</h2>
                        <p>{{ game.description }}</p>
                    </div>
                </div>
            </div>
            {% else %}
                <div class="page-container">
                    {% if extension in ['png', 'jpg', 'jpeg', 'gif'] %}
                        <div class="section" style="background-image: url('{{ asset(image.link) }}');">
                            <div class="box-container">
                                <div class="text-container">
                                    <p>{{ image.text }}</p>
                                </div>
                            </div>
                        </div>
                    {% elseif extension == 'mp4' %}
                        <div class="section">
                            <video class="video-background" autoplay loop muted>
                                <source src="{{ asset(image.link) }}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                            <div class="text-container">
                                <p>{{ image.text }}</p>
                            </div>
                        </div>
                    {% endif %}   
                </div>
            {% endif %}
        {% endfor %}
    {% else %}
        <blockquote class="blockquote text-center">
            <h2>{{ game.name }}</h2>
            <p>{{ game.description }}</p>
        </blockquote>
    {% endif %}
    <div class="table-center">
        <table class="table table-striped table-dark">
            <thead>
                <tr>
                    <th scope="col"> <button class="btn btn-primary">Mon Bouton</button></th>
                    <th scope="col"><span class="text-muted">Texte à côté du bouton</span></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                {% for platform in game.platform %}
                    <th><img src="{{ asset(platform.link) }}" alt="{{ platform.name }}" style="max-width: 100px; height: auto;" class="platform-image"></th>
                {% endfor %}
                </tr>
            </tbody>
        </table>
    </div>

{% if is_granted('ROLE_ADMIN') or is_granted('ROLE_SUPER_ADMIN') %}
<div class="action-buttons">
    <a href="{{ path('app_games_edit', {'id': game.id, 'name': game.name}) }}" class="btn btn-warning">{{ 'Edit'|trans }}</a>
    {% if is_granted('ROLE_SUPER_ADMIN') %}
        {{ include('games/_delete_form.html.twig', {'game': game}) }}
    {% endif %}
</div>
{% endif %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const textContainers = document.querySelectorAll('.text-container');

            const observerOptions = {
                root: null,
                rootMargin: '0px',
                threshold: 0.1
            };

            const observerCallback = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('zoom');
                    } else {
                        entry.target.classList.remove('zoom');
                    }
                });
            };

            const observer = new IntersectionObserver(observerCallback, observerOptions);

            textContainers.forEach(container => {
                observer.observe(container);
            });
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
        const sections = document.querySelectorAll('.section');
        const textContainers = document.querySelectorAll('.text-container');

        const observerOptions = {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        };

        const observerCallback = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('sticky');
                    const textContainer = entry.target.querySelector('.text-container');
                    if (textContainer) {
                        textContainer.classList.add('zoom');
                    }
                } else {
                    entry.target.classList.remove('sticky');
                    const textContainer = entry.target.querySelector('.text-container');
                    if (textContainer) {
                        textContainer.classList.remove('zoom');
                    }
                }
            });
        };

        const observer = new IntersectionObserver(observerCallback, observerOptions);

        sections.forEach(section => {
            observer.observe(section);
        });
    });
    </script>
{% endblock %}


